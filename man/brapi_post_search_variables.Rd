% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brapi_post_search_variables.R
\name{brapi_post_search_variables}
\alias{brapi_post_search_variables}
\title{post /search/variables}
\usage{
brapi_post_search_variables(
  con = NULL,
  dataTypes = "",
  externalReferenceIDs = "",
  externalReferenceSources = "",
  methodDbIds = "",
  observationVariableDbIds = "",
  observationVariableNames = "",
  ontologyDbIds = "",
  page = 0,
  pageSize = 1000,
  scaleDbIds = "",
  studyDbId = "",
  traitClasses = "",
  traitDbIds = ""
)
}
\arguments{
\item{con}{list; required: TRUE; BrAPI connection object}

\item{dataTypes}{vector of type character; required: FALSE; List of scale
data types to filter search results. Class of the scale entries can be:
\itemize{
\item "Code" -  This scale class is exceptionally used to express
complex traits. Code is a nominal scale that combines the expressions of
the different traits composing the complex trait. For example a severity
trait might be expressed by a 2 digit and 2 character code. The first 2
digits are the percentage of the plant covered by a fungus and the 2
characters refer to the delay in development, e.g. "75VD"
means "75 \%" of the plant is infected and the plant is very
delayed.
\item "Date" - The date class is for events expressed in a time
format, coded in the ISO 8601 standard extended format, where date, time
and time zone information needs to be provided (check for example
\url{https://www.w3.org/TR/NOTE-datetime}.
\item "Duration" - The Duration class is for time elapsed between
two events expressed in a time format, e.g. days, hours, months.
\item "Nominal" - Categorical scale that can take one of a limited
and fixed number of categories. There is no intrinsic ordering to the
categories.
\item "Numerical" - Numerical scales express the trait with real
numbers. The numerical scale defines the unit e.g. centimeter, ton per
hectare, branches.
\item "Ordinal" - Ordinal scales are scales composed of ordered
categories.
\item "Text" - A free text is used to express the trait.
}

default: "", when using multiple values supply as c(
"value1", "value2").}

\item{externalReferenceIDs}{vector of type character; required: FALSE; List
of external reference IDs. Could be a simple strings or a URIs. (use with
\code{externalReferenceSources} parameter); default: "", when using
multiple values supply as c("value1", "value2").}

\item{externalReferenceSources}{vector of type character; required: FALSE;
List of identifiers for the source system or database of an external
reference (use with \code{externalReferenceIDs} parameter); default:
"", when using multiple values supply as c("value1",
"value2").}

\item{methodDbIds}{vector of type character; required: FALSE; List of methods
, supplied as unique database identifiers, to filter search results;
default: "", when using multiple values supply as c(
"value1", "value2").}

\item{observationVariableDbIds}{vector of type character; required: FALSE;
List of unique observation variable datbase identifiers to search for;
default: "", when using multiple values supply as c(
"value1", "value2").}

\item{observationVariableNames}{vector of type character; required: FALSE;
List of human readable observation variable names to search for; default:
"", when using multiple values supply as c("value1",
"value2").}

\item{ontologyDbIds}{vector of type character; required: FALSE; List of
unique ontology database identifiers to search for; default: "",
when using multiple values supply as c("value1",
"value2").}

\item{page}{integer; required: FALSE; Used to request a specific page of data
to be returned. The page indexing starts at 0 (the first page is
\code{page = 0}). Default is \code{0}.}

\item{pageSize}{integer; required: FALSE; The size of the pages to be
returned. Default is \code{1000}.}

\item{scaleDbIds}{vector of type character; required: FALSE; List of unique
scale database identifiers to filter search results; default: ""
, when using multiple values supply as c("value1",
"value2").}

\item{studyDbId}{vector of type character; required: FALSE; The unique
database identifiers of studies to filter on; default: "",
when using multiple values supply as c("value1",
"value2").}

\item{traitClasses}{vector of type character; required: FALSE; List of trait
classes to filter search results, examples:
"morphological", "phenological",
"agronomical", "physiological",
"abiotic stress", "biotic stress",
"biochemical", "quality traits",
"fertility", \emph{etc.}); default: "", when using multiple
values supply as c("value1", "value2").}

\item{traitDbIds}{vector of type character; required: FALSE; List of trait
unique database identifiers to filter search results; default:
"", when using multiple values supply as c("value1",
"value2").}
}
\value{
data.frame
}
\description{
Submit a search request for Observation \code{Variables}
}
\details{
Submit a search request for Observation \code{Variables}. Function will
return either the search results (Status 200 for an immediate response) or
a \code{searchResultsDbId} (Status 202 for both a saved and an asynchronous
search).
}
\examples{
\dontrun{
con <- brapi_db()$testserver
con[["token"]] <- "YYYY"

# Immediate Response Example
brapi_post_search_variables(con = con, page = 0, pageSize = 1000)

# Saved or Asynchronous Search Response Example
brapi_post_search_variables(
 con = con,
 dataTypes = c("Numerical", "Text"),
 externalReferenceIDs = "https://brapi.org/specification",
 externalReferenceSources = "BrAPI Doc",
 ontologyDbIds = "ontology_variable1",
 page = 0,
 pageSize = 1000)
}

}
\references{
\href{https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.0#/Observation\%20Variables/post_search_variables }{BrAPI SwaggerHub}
}
\seealso{
Other brapi-phenotyping: 
\code{\link{brapi_get_events}()},
\code{\link{brapi_get_images_imageDbId}()},
\code{\link{brapi_get_images}()},
\code{\link{brapi_get_methods_methodDbId}()},
\code{\link{brapi_get_methods}()},
\code{\link{brapi_get_observationlevels}()},
\code{\link{brapi_get_observations_observationDbId}()},
\code{\link{brapi_get_observations_table}()},
\code{\link{brapi_get_observations}()},
\code{\link{brapi_get_observationunits_observationUnitDbId}()},
\code{\link{brapi_get_observationunits_table}()},
\code{\link{brapi_get_observationunits}()},
\code{\link{brapi_get_ontologies}()},
\code{\link{brapi_get_scales_scaleDbId}()},
\code{\link{brapi_get_scales}()},
\code{\link{brapi_get_search_images_searchResultsDbId}()},
\code{\link{brapi_get_search_observations_searchResultsDbId}()},
\code{\link{brapi_get_search_observationunits_searchResultsDbId}()},
\code{\link{brapi_get_search_variables_searchResultsDbId}()},
\code{\link{brapi_get_traits_traitDbId}()},
\code{\link{brapi_get_traits}()},
\code{\link{brapi_get_variables_observationVariableDbId}()},
\code{\link{brapi_get_variables}()},
\code{\link{brapi_post_images}()},
\code{\link{brapi_post_methods}()},
\code{\link{brapi_post_observations}()},
\code{\link{brapi_post_observationunits}()},
\code{\link{brapi_post_scales}()},
\code{\link{brapi_post_search_images}()},
\code{\link{brapi_post_search_observations}()},
\code{\link{brapi_post_search_observationunits}()},
\code{\link{brapi_post_traits}()},
\code{\link{brapi_post_variables}()},
\code{\link{brapi_put_images_imageDbId_imagecontent}()},
\code{\link{brapi_put_images_imageDbId}()},
\code{\link{brapi_put_methods_methodDbId}()},
\code{\link{brapi_put_observations_observationDbId}()},
\code{\link{brapi_put_observationunits_observationUnitDbId}()},
\code{\link{brapi_put_scales_scaleDbId}()},
\code{\link{brapi_put_traits_traitDbId}()},
\code{\link{brapi_put_variables_observationVariableDbId}()}

Other Observation Variables: 
\code{\link{brapi_get_search_variables_searchResultsDbId}()},
\code{\link{brapi_get_variables_observationVariableDbId}()},
\code{\link{brapi_get_variables}()},
\code{\link{brapi_post_variables}()},
\code{\link{brapi_put_variables_observationVariableDbId}()}
}
\author{
Maikel Verouden
}
\concept{Observation Variables}
\concept{brapi-phenotyping}
