% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brapi_post_search_people.R
\name{brapi_post_search_people}
\alias{brapi_post_search_people}
\title{post /search/people}
\usage{
brapi_post_search_people(
  con = NULL,
  emailAddresses = "",
  externalReferenceIDs = "",
  externalReferenceSources = "",
  firstNames = "",
  middleNames = "",
  lastNames = "",
  mailingAddresses = "",
  personDbIds = "",
  phoneNumbers = "",
  userIDs = "",
  page = 0,
  pageSize = 1000
)
}
\arguments{
\item{con}{list; required: TRUE; BrAPI connection object}

\item{emailAddresses}{vector of type character; required: FALSE; email
address(es) for person(s) to search for; default: "", when
using multiple values supply as c("value1",
"value2").}

\item{externalReferenceIDs}{vector of type character; required: FALSE;
External reference identifier(s) to search for. Could be a simple strings
or a URIs (use with \code{externalReferenceSources} parameter).; default:
"", when using multiple values supply as c("value1",
"value2").}

\item{externalReferenceSources}{vector of type character; required: FALSE;
Source system or database identifier(s) of an external reference(s) to
search for (use with \code{externalReferenceIDs} parameter); default:
"", when using multiple values supply as c("value1",
"value2").}

\item{firstNames}{vector of type character; required: FALSE; Person(s) first
name(s) to search for; default: "", when using multiple values
supply as c("value1", "value2").}

\item{middleNames}{vector of type character; required: FALSE; Person(s)
middle name(s) to search for; default: "", when using multiple
values supply as c("value1", "value2").}

\item{lastNames}{vector of type character; required: FALSE; Person(s) last
name(s) to search for; default: "", when using multiple values
supply as c("value1", "value2").}

\item{mailingAddresses}{vector of type character; required: FALSE; physical
address(es) of a person(s) to search for; default: "", when
using multiple values supply as c("value1", "value2").}

\item{personDbIds}{vector of type character; required: FALSE; Unique
Identifier(s) for person(s) to search for; default: "", when
using multiple values supply as c("value1", "value2").}

\item{phoneNumbers}{vector of type character; required: FALSE; phone
number(s) of person(s) to search for; default: "", when using
multiple values supply as c("value1", "value2").}

\item{userIDs}{vector of type character; required: FALSE; A systems user
identifier(s) associated with person(s) to search for. Different from
personDbId because you could have a person who is not a user of the
system.; default: "", when using multiple values supply as
c("value1", "value2").}

\item{page}{integer; required: FALSE; Which result page is requested. The
page indexing starts at 0 (the first page is \code{page = 0}). Default is \code{0}.}

\item{pageSize}{integer; required: FALSE; The size of the pages to be
returned. Default is \code{1000}.}
}
\value{
data.frame
}
\description{
Submit a search request for People
}
\details{
Advanced searching for the people resource. Function will return
either the search results (Status 200 for an immediate response) or a
\code{searchResultsDbId} (Status 202 for both a saved and an asynchronous
search).
}
\examples{
\dontrun{
con <- brapi_db()$testserver
con[["token"]] <- "YYYY"

TO BE ADDED STILL
}

}
\references{
\href{https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.0#/People/post_search_people }{BrAPI SwaggerHub}
}
\seealso{
Other brapi-core: 
\code{\link{brapi_get_commoncropnames}()},
\code{\link{brapi_get_lists_listDbId}()},
\code{\link{brapi_get_lists}()},
\code{\link{brapi_get_locations_locationDbId}()},
\code{\link{brapi_get_locations}()},
\code{\link{brapi_get_people_personDbId}()},
\code{\link{brapi_get_people}()},
\code{\link{brapi_get_programs_programDbId}()},
\code{\link{brapi_get_programs}()},
\code{\link{brapi_get_search_lists_searchResultsDbId}()},
\code{\link{brapi_get_search_locations_searchResultsDbId}()},
\code{\link{brapi_get_search_people_searchResultsDbId}()},
\code{\link{brapi_get_search_programs_searchResultsDbId}()},
\code{\link{brapi_get_search_studies_searchResultsDbId}()},
\code{\link{brapi_get_search_trials_searchResultsDbId}()},
\code{\link{brapi_get_seasons_seasonDbId}()},
\code{\link{brapi_get_seasons}()},
\code{\link{brapi_get_serverinfo}()},
\code{\link{brapi_get_studies_studyDbId}()},
\code{\link{brapi_get_studies}()},
\code{\link{brapi_get_studytypes}()},
\code{\link{brapi_get_trials_trialDbId}()},
\code{\link{brapi_get_trials}()},
\code{\link{brapi_post_lists_listDbId_items}()},
\code{\link{brapi_post_lists}()},
\code{\link{brapi_post_locations}()},
\code{\link{brapi_post_people}()},
\code{\link{brapi_post_programs}()},
\code{\link{brapi_post_search_lists}()},
\code{\link{brapi_post_search_locations}()},
\code{\link{brapi_post_seasons}()},
\code{\link{brapi_post_studies}()},
\code{\link{brapi_post_trials}()},
\code{\link{brapi_put_lists_listDbId}()},
\code{\link{brapi_put_locations_locationDbId}()},
\code{\link{brapi_put_people_personDbId}()},
\code{\link{brapi_put_programs_programDbId}()},
\code{\link{brapi_put_seasons_seasonDbId}()},
\code{\link{brapi_put_studies_studyDbId}()},
\code{\link{brapi_put_trials_trialDbId}()}

Other People: 
\code{\link{brapi_get_people_personDbId}()},
\code{\link{brapi_get_people}()},
\code{\link{brapi_get_search_people_searchResultsDbId}()},
\code{\link{brapi_post_people}()},
\code{\link{brapi_put_people_personDbId}()}
}
\author{
Maikel Verouden
}
\concept{People}
\concept{brapi-core}
