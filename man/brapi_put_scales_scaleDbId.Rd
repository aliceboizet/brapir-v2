% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brapi_put_scales_scaleDbId.R
\name{brapi_put_scales_scaleDbId}
\alias{brapi_put_scales_scaleDbId}
\title{put /scales/\{scaleDbId\}}
\usage{
brapi_put_scales_scaleDbId(
  con = NULL,
  scaleDbId = "",
  additionalInfo = list(),
  dataType = "",
  decimalPlaces = 0,
  externalReferences = "",
  ontologyReference = list(),
  scaleName = "",
  validValues = list()
)
}
\arguments{
\item{con}{list; required: TRUE; BrAPI connection object}

\item{scaleDbId}{character; required: TRUE; Identifier of the scale to update
details of.}

\item{additionalInfo}{list; required: FALSE; Additional arbitrary information.
If provided use the following construct list(additionalProp1 = "string",
additionalProp2 =  "string", additionalProp3 = "string").

The Examples section shows an example on how to construct the
\code{additionalInfo} argument as a list.}

\item{dataType}{character; required: FALSE; Class of the scale, entries can
be:
\itemize{
\item "Code" -  This scale class is exceptionally used to express
complex traits. Code is a nominal scale that combines the expressions of
the different traits composing the complex trait. For example a severity
trait might be expressed by a 2 digit and 2 character code. The first 2
digits are the percentage of the plant covered by a fungus and the 2
characters refer to the delay in development, e.g. "75VD"
means "75 \%" of the plant is infected and the plant is very
delayed.
\item "Date" - The date class is for events expressed in a time
format, coded in the ISO 8601 standard extended format, where date, time
and time zone information needs to be provided (check for example
\url{https://www.w3.org/TR/NOTE-datetime}.
\item "Duration" - The Duration class is for time elapsed between
two events expressed in a time format, e.g. days, hours, months.
\item "Nominal" - Categorical scale that can take one of a limited
and fixed number of categories. There is no intrinsic ordering to the
categories.
\item "Numerical" - Numerical scales express the trait with real
numbers. The numerical scale defines the unit e.g. centimeter, ton per
hectare, branches.
\item "Ordinal" - Ordinal scales are scales composed of ordered
categories.
\item "Text" - A free text is used to express the trait.
}}

\item{decimalPlaces}{integer; required: FALSE; For numerical, number of
decimal places to be reported.}

\item{externalReferences}{data.frame; required: FALSE; A data.frame of
external reference ids. These are references to this piece of data in an
external system. Could be a simple string or a URI. The \code{externalReferences}
argument data.frame should contain the following columns:
\itemize{
\item \code{referenceID} character; required: TRUE; The external reference ID. Could
be a simple string or a URI.
\item \code{referenceSource} character; required: TRUE; An identifier for the source
system or database of this reference.
}

The Examples section shows an example of how to construct the
\code{externalReferences} argument as a data.frame.}

\item{ontologyReference}{list; required: FALSE; MIAPPE V1.1 (DM-85) Variable
accession number - Accession number of the variable in the Crop Ontology.
(DM-87) Trait accession number - Accession number of the trait in a
suitable controlled vocabulary (Crop Ontology, Trait Ontology). (DM-89)
Method accession number - Accession number of the method in a suitable
controlled vocabulary (Crop Ontology, Trait Ontology). (DM-93) Scale
accession number - Accession number of the scale in a suitable controlled
vocabulary (Crop Ontology).

The \code{ontolgyReference} list should/can contain the following elements:
\itemize{
\item \code{documentationLinks} data.frame; required: FALSE; Links to various
ontology documentation. Each row in the \code{documentationLinks} data.frame
should contain the following columns:
\itemize{
\item \code{URL} character; required: FALSE; A uniform resource locator
specified as a valid uniform resource identifier (URI), e.g.
http://purl.obolibrary.org/obo/ro.owl
\item \code{type} character; required: FALSE; one of "OBO"|
"RDF"|"WEBPAGE".
}
\item \code{ontologyDbId} character; required: TRUE; Ontology database unique
identifier.
\item \code{ontologyName} character; required: TRUE; Ontology name, e.g. the Crop
Ontology.
\item \code{version} character; required: FALSE; Ontology version (no specific
format).
}

The Examples section shows an example of how to construct the
\code{ontologyReference} argument as a list.}

\item{scaleName}{character; required: FALSE; Name of the scale. MIAPPE V1.1
(DM-92) Scale Name of the scale associated with the variable.}

\item{validValues}{list; required: FALSE; Valid values for the scale. The
\code{validValues} list can contain the following elements:
\itemize{
\item \code{categories} data.frame; required: FALSE;    data.frame of possible values
with optional labels. Each row in the \code{categories} data.frame must have
the following columns:
\itemize{
\item \code{label} character; required: FALSE; A text label for a category.
\item \code{value} character; required: FALSE; The actual value for a category.
}
\item \code{max} integer; required: FALSE; Maximum value (used for field data
capture control) for numerical and date scales.
\item \code{min} integer; required: FALSE; Minimum value (used for field data
capture control) for numerical and date scales.
}

The Examples section shows an example of how to construct the
\code{validValues} argument as a list.}
}
\value{
data.frame
}
\description{
Update an existing Scale
}
\details{
Update the details of an existing scale
}
\examples{
\dontrun{
con <- brapi_db()$testserver
con[["token"]] <- "YYYY"
## Create function argument values
additionalInfo <- list(dummyData = "TRUE",
                       example = "post_scales")
dataType <- "Numerical"
decimalPlaces <- 2
externalReferences <-
  data.frame(referenceID = c("doi:10.155454/12341234",
                             "http://purl.obolibrary.org/obo/ro.owl",
                             "75a50e76"),
             referenceSource = c("DOI",
                                 "OBO Library",
                                 "Remote Data Collection Upload Tool"))
ontologyReference <- list(
  documentationLinks = data.frame(
    URL = c("http://purl.obolibrary.org/obo/ro.owl",
            "https://en.wikipedia.org/wiki/Discriminant"),
    type = c("OBO",
             "WEBPAGE")),
  ontologyDbId = "ontology_attribute1",
  ontologyName = "Ontology.org",
  version = "17")
scaleName <- "Meters"
validValues <- list(
  categories = data.frame(
    label = c("low", "medium", "high"),
    value = c("0", "5", "10")),
  max = 9999,
  min = 2)
## Add the new scale
out <- brapi_post_scales(con = con,
                         additionalInfo = additionalInfo,
                         dataType = dataType,
                         decimalPlaces = decimalPlaces,
                         externalReferences = externalReferences,
                         ontologyReference = ontologyReference,
                         scaleName = scaleName,
                         validValues = validValues)
## Obtain the scaleDbId
scaleDbId <- unique(out$scaleDbId)
## Retrieve information about the new scale
brapi_get_scales_scaleDbId(con = con, scaleDbId = scaleDbId)
## Update the new scale information
additionalInfo <- list(dummyData = "TRUE",
                       example = "put_scales_scaleDbId")
decimalPlaces <- 1
validValues <- list(
  categories = data.frame(
    label = c("low", "medium", "high"),
    value = c("0", "5", "10")),
  max = 9999,
  min = 0)
brapi_put_scales_scaleDbId(con = con,
                           scaleDbId = scaleDbId,
                           additionalInfo = additionalInfo,
                           decimalPlaces = decimalPlaces,
                           validValues = validValues)
## Check the changes
brapi_get_scales_scaleDbId(con = con, scaleDbId = scaleDbId)

}

}
\references{
\href{https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.0#/Scales/put_scales__scaleDbId_ }{BrAPI SwaggerHub}
}
\seealso{
Other brapi-phenotyping: 
\code{\link{brapi_get_events}()},
\code{\link{brapi_get_images_imageDbId}()},
\code{\link{brapi_get_images}()},
\code{\link{brapi_get_methods_methodDbId}()},
\code{\link{brapi_get_methods}()},
\code{\link{brapi_get_observationlevels}()},
\code{\link{brapi_get_observations_observationDbId}()},
\code{\link{brapi_get_observations}()},
\code{\link{brapi_get_observationunits_observationUnitDbId}()},
\code{\link{brapi_get_observationunits}()},
\code{\link{brapi_get_ontologies}()},
\code{\link{brapi_get_scales_scaleDbId}()},
\code{\link{brapi_get_scales}()},
\code{\link{brapi_get_traits_traitDbId}()},
\code{\link{brapi_get_traits}()},
\code{\link{brapi_get_variables_observationVariableDbId}()},
\code{\link{brapi_get_variables}()},
\code{\link{brapi_post_methods}()},
\code{\link{brapi_post_observations}()},
\code{\link{brapi_post_observationunits}()},
\code{\link{brapi_post_scales}()},
\code{\link{brapi_post_traits}()},
\code{\link{brapi_put_methods_methodDbId}()},
\code{\link{brapi_put_observations_observationDbId}()},
\code{\link{brapi_put_observationunits_observationUnitDbId}()},
\code{\link{brapi_put_traits_traitDbId}()}

Other Scales: 
\code{\link{brapi_get_scales_scaleDbId}()},
\code{\link{brapi_get_scales}()},
\code{\link{brapi_post_scales}()}
}
\author{
Maikel Verouden
}
\concept{Scales}
\concept{brapi-phenotyping}
