% Generated by roxygen2: do not edit by hand
% Please edit documentation in
%   R/brapi_put_observationunits_observationUnitDbId.R
\name{brapi_put_observationunits_observationUnitDbId}
\alias{brapi_put_observationunits_observationUnitDbId}
\title{put /observationunits/\{observationUnitDbId\}}
\usage{
brapi_put_observationunits_observationUnitDbId(
  con = NULL,
  observationUnitDbId = "",
  additionalInfo = list(),
  externalReferences = "",
  germplasmDbId = "",
  germplasmName = "",
  locationDbId = "",
  locationName = "",
  observationUnitName = "",
  observationUnitPUI = "",
  observationUnitPosition = list(),
  programDbId = "",
  programName = "",
  seedLotDbId = "",
  studyDbId = "",
  studyName = "",
  treatments = "",
  trialDbId = "",
  trialName = ""
)
}
\arguments{
\item{con}{list; required: TRUE; BrAPI connection object}

\item{observationUnitDbId}{character; required: TRUE; The unique identifier
of the specific observation unit.}

\item{additionalInfo}{list; required: FALSE; Additional arbitrary information.
If provided use the following construct list(additionalProp1 = "string",
additionalProp2 =  "string", additionalProp3 = "string").

The Examples section shows an example on how to construct the
\code{additionalInfo} argument as a list.}

\item{externalReferences}{data.frame; required: FALSE; A data.frame of
external reference ids. These are references to this piece of data in an
external system. Could be a simple string or a URI. The \code{externalReferences}
argument data.frame should contain the following columns:
\itemize{
\item \code{referenceID} character; required: TRUE; The external reference ID. Could
be a simple string or a URI.
\item \code{referenceSource} character; required: TRUE; An identifier for the source
system or database of this reference.
}

The Examples section shows an example of how to construct the
\code{externalReferences} argument as a data.frame.}

\item{germplasmDbId}{character; required: FALSE; Unique germplasm (accession)
identifier for the observation unit.}

\item{germplasmName}{character; required: FALSE; Human readable germplasm
name for the observation unit. It can be the preferred name and does not
have to be unique.}

\item{locationDbId}{character; required: FALSE; The identifier, which
uniquely identifies a location, associated with this study.}

\item{locationName}{character; required: FALSE; The human readable name of a
location associated with this study.}

\item{observationUnitName}{character; required: FALSE; A human readable name
for an observation unit.}

\item{observationUnitPUI}{character; required: FALSE; A Permanent Unique
Identifier for an observation unit. MIAPPE V1.1 (DM-72) External ID -
Identifier for the observation unit in a persistent repository, comprises
the name of the repository and the identifier of the observation unit
therein. The EBI Biosamples repository can be used. URI are recommended
when possible.}

\item{observationUnitPosition}{list; required: FALSE; All positional and
layout information related to this Observation Unit. MIAPPE V1.1 (DM-73)
Spatial distribution - Type and value of a spatial coordinate
(georeference or relative) or level of observation (plot 45, subblock 7,
block 2) provided as a key-value pair of the form type:value. Levels of
observation must be consistent with those listed in the Study section. The
\code{observationUnitPosition} list can contain the following elements:
\itemize{
\item \code{entryType} character; required: FALSE; The type of entry for this
observation unit, possible values: "CHECK"|"TEST"
|"FILLER".
\item \code{geoCoordinates} list; required: FALSE; One geometry as defined by
GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84
geographic coordinate reference system. A coordinate position MUST be
two or more elements. The first two elements are longitude and latitude,
or easting and northing, precisely in that order and using decimal
numbers. Altitude or elevation MAY be included as an optional third
element and is specified in meters. The \code{geoCcoordinates} list MUST
contain the following two elements:
\itemize{
\item \code{geometry} as a list; required: TRUE; A geometry as defined by GeoJSON
(RFC 7946). In this context, only Point or Polygon geometry are
allowed.

The Point geometry is described by exactly two elements:
\itemize{
\item \code{coordinates} as a vector of type character; required: TRUE; A
point position containing two or more elements. The first two
elements are longitude and latitude, or easting and northing,
precisely in that order and using decimal numbers. Altitude or
elevation MAY be included as an optional third element.
\item \code{type} as a character; required: TRUE; Literally specified as
"Point".
}

The Polygon geometry is described by exactly two elements:
\itemize{
\item \code{coordinates} as a list; required : TRUE; List of linear rings,
where each linear ring is a list of at least four positions with
the first equal to the last. The first linear ring specifies the
exterior ring, and each subsequent ring an interior ring.
\item \code{type} as a character; required: TRUE; Literally specified as
"Polygon".
}
\item \code{type} as a character; required: TRUE; Literally specified as "Feature".
}

The easiest way in R to construct the \code{geoCoordinates} list is to use
the \strong{geojsonR} package. The Examples section shows how to create a
\code{geoCoordinates} list object for a point and a polygon geometry.
\item \code{observationLevel} list; required: FALSE; The exact level and level code
of an observation unit. MIAPPE V1.1 DM-71 Observation unit type "Type of
observation unit in textual form, usually one of the following: study,
block, sub-block, plot, sub-plot, pot, plant. Use of other observation
unit types is possible but not recommended. The observation unit type
can not be used to indicate sub-plant levels. However, observations can
still be made on the sub-plant level, as long as the details are
indicated in the associated observed variable (see observed variables).
Alternatively, it is possible to use samples for more detailed tracing
of sub-plant units, attaching the observations to them instead.". The
\code{observationLevel} list can contain the following elements:
\itemize{
\item \code{levelCode} character; required: FALSE; An identifier code for this
level tag. Identify this observation unit by each level of the
hierarchy, where it exists.
\item \code{levelName} character; required: FALSE; A name for this level.
\item \code{levelOrder} integer; required: FALSE; Defines where that level exists
in the hierarchy of levels. Level Order's lower numbers are at the top
of the hierarchy (i.e. field -> 1) and higher numbers are at the bottom
of the hierarchy (i.e. plant -> 9).
}
\item \code{observationLevelRelationships} data.frame; required: FALSE; Data.frame
of observation levels to indicate the granularity level at which the
measurements are taken. Each row in the data.frame defines the level
code, level name (\code{levelName}), and the level order, as integer, where
that level exists in the hierarchy of levels. \code{levelOrders} lower
numbers are at the top of the hierarchy (i.e. field -> 0) and higher
numbers are at the bottom of the hierarchy (ie plant > 6). \code{levelCode}
is an identifier code for this level tag. Identify this observation unit
by each level of the hierarchy, where it exists.
\item \code{positionCoordinateX}    character; required: FALSE; The X position
coordinate for an observation unit. Different systems may use different
coordinate systems.
\item \code{positionCoordinateXType} character; required: FALSE; The type of
positional coordinate used. Must be one of the following values:
\itemize{
\item \code{LONGITUDE} - ISO 6709 standard, WGS84 geodetic datum.
\item \code{LATITUDE} - ISO 6709 standard, WGS84 geodetic datum.
\item \code{PLANTED_ROW} - The physical planted row number
\item \code{PLANTED_INDIVIDUAL} - The physical counted number, could be
independent or within a planted row.
\item \code{GRID_ROW} - The row index number of a square grid overlay
\item \code{GRID_COL} - The column index number of a square grid overlay
\item \code{MEASURED_ROW} - The distance in meters from a defined 0-th row
\item \code{MEASURED_COL} - The distance in meters from a defined 0-th column
}
\item \code{positionCoordinateY} charcter; required: FALSE; The Y position
coordinate for an observation unit. Different systems may use different
coordinate systems.
\item \code{positionCoordinateYType} character; required: FALSE; The type of
positional coordinate used. Must be one of the following values:
\itemize{
\item \code{LONGITUDE} - ISO 6709 standard, WGS84 geodetic datum.
\item \code{LATITUDE} - ISO 6709 standard, WGS84 geodetic datum.
\item \code{PLANTED_ROW} - The physical planted row number
\item \code{PLANTED_INDIVIDUAL} - The physical counted number, could be
independent or within a planted row.
\item \code{GRID_ROW} - The row index number of a square grid overlay
\item \code{GRID_COL} - The column index number of a square grid overlay
\item \code{MEASURED_ROW} - The distance in meters from a defined 0-th row
\item \code{MEASURED_COL} - The distance in meters from a defined 0-th column
}
}}

\item{programDbId}{character; required: FALSE; The identifier, which uniquely
identifies a program.}

\item{programName}{character; required: FALSE; The human readable name of a
program.}

\item{seedLotDbId}{character; required: FALSE; The unique identifier for the
originating Seed Lot.}

\item{studyDbId}{character; required: FALSE; The identifier, which uniquely
identifies a study within the given database server.}

\item{studyName}{character; required: FALSE; The human readable name for a
study.}

\item{treatments}{data.frame; required: FALSE; Data.frame of treatments
applied to an observation unit. MIAPPE V1.1 (DM-74) Observation Unit
factor value - List of values for each factor applied to the observation
unit. Each row in the \code{treatments} data.frame should contain the following
columns:
\itemize{
\item \code{factor} character; required: TRUE; The type of treatment/factor. e.g.
'fertilizer', 'inoculation', 'irrigation', \emph{etc.} MIAPPE V1.1 (DM-61)
Experimental Factor type - Name/Acronym of the experimental factor.
\item \code{modality} character; required: TRUE; The treatment/factor description.
e.g. 'low fertilizer', 'yellow rust inoculation', 'high water', \emph{etc.}
MIAPPE V1.1 (DM-62) Experimental Factor description - Free text
description of the experimental factor. This includes all relevant
treatments planned and protocol planned for all the plants targeted by a
given experimental factor.
}}

\item{trialDbId}{character; required: FALSE; The identifier, which uniquely
identifies a trial.}

\item{trialName}{character; required: FALSE; The human readable name of a
trial.}
}
\value{
data.frame
}
\description{
Update an existing Observation Unit
}
\details{
Update an existing Observation Units
}
\examples{
\dontrun{
con <- brapi_db()$testserver
con[["token"]] <- "YYYY"
additionalInfo <- list(dummyData = "TRUE",
                       example = "post_observationunits")
externalReferences <-
  data.frame(referenceID = c("doi:10.155454/12341234",
                             "http://purl.obolibrary.org/obo/ro.owl",
                             "75a50e76"),
             referenceSource = c("DOI",
                                 "OBO Library",
                                 "Remote Data Collection Upload Tool"))
germplasmDbId <- "germplasm2"
germplasmName <- "Tomatillo Fantastico"
locationDbId <- "location_01"
locationName <- "Location 1"
observationUnitName <- "Plot 1"
observationUnitPUI <- "doi:10.12345/plot/1a9afc14"
## Create the observationUnitPosition list object
observationUnitPosition <- list()
observationUnitPosition$entryType <- "TEST"
## Create a geoCoordinates list object
library(geojsonR)
## Point geometry
init <- TO_GeoJson$new()
pointGeometry <- list()
pointData <- c(-76.46313, # longitude
                42.44423, # lattitude
                     123) # altitude
pointGeometry[["geometry"]] <- init$Point(data = pointData,
                                          stringify = FALSE)
pointGeometry[["type"]] <- "Feature"
##
## Polygon geometry with an exterior and one interior ring
init <- TO_GeoJson$new()
## Individual polygon points are provided as c(longitude, latitude, altitude)
polygonData <- list(list(c(-76.476949, 42.447274, 123), # exterior ring (rectangle)
                         c(-76.474429, 42.447258, 123),
                         c(-76.474428, 42.446193, 123),
                         c(-76.476961, 42.446211, 123),
                         c(-76.476949, 42.447274, 123)))
polygonGeometry <- list()
polygonGeometry[["geometry"]] <- init$Polygon(data = polygonData,
                                              stringify = FALSE)
polygonGeometry[["type"]] <- "Feature"
observationUnitPosition$geoCoordinates <- pointGeometry
observationUnitPosition$observationLevel <- list(
   levelCode = "plot_1",
   levelName = "plot",
   levelOrder =  4)
observationUnitPosition$observationLevelRelationships <- data.frame(
   levelCode  = c("fieldA", "rep1", "block1"),
   levelName  = c("field", "rep", "block"),
   levelOrder = c(1, 2, 3))
observationUnitPosition$positionCoordinateX <- "1"
observationUnitPosition$positionCoordinateXType <- "PLANTED_ROW"
observationUnitPosition$positionCoordinateY <- "1"
observationUnitPosition$positionCoordinateYType <- "PLANTED_INDIVIDUAL"
programDbId <- "program1"
programName <- "The BrAPI Breeding Program"
seedLotDbId <- "seed_lot2"
studyDbId <- "study1"
studyName <- "Paw paw 2013 yield trial"
treatments <- data.frame(
   factor   = c("fertilizer", "irrigation"),
   modality = c("high fertilizer", "low water"))
trialDbId <- "trial1"
trialName <- "Peru Yield Trial 1"
## POST /observationunits to add a new one
out <- brapi_post_observationunits(
  con = con,
  additionalInfo = additionalInfo,
  externalReferences = externalReferences,
  germplasmDbId = germplasmDbId,
  germplasmName = germplasmName,
  locationDbId = locationDbId,
  locationName = locationName,
  observationUnitName = observationUnitName,
  observationUnitPUI = observationUnitPUI,
  observationUnitPosition = observationUnitPosition,
  programDbId = programDbId,
  programName = programName,
  seedLotDbId = seedLotDbId,
  studyDbId = studyDbId,
  studyName = studyName,
  treatments = treatments,
  trialDbId = trialDbId,
  trialName = trialName)
## Obtain the observationUnitDbId of the new observation unit
observationUnitDbId <- unique(out$observationUnitDbId)
## Update the information of the new observation unit
brapi_put_observationunits_observationUnitDbId(
  con = con,
  observationUnitDbId = observationUnitDbId,
  additionalInfo = list(
    dummyData = "TRUE",
    example = "put_observationunits_observationUnitDbId"),
  observationUnitPosition = list(geoCoordinates = polygonGeometry))
}

}
\references{
\href{https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.0#/Observation\%20Units/put_observationunits__observationUnitDbId_ }{BrAPI SwaggerHub}
}
\seealso{
Other brapi-phenotyping: 
\code{\link{brapi_get_events}()},
\code{\link{brapi_get_images_imageDbId}()},
\code{\link{brapi_get_images}()},
\code{\link{brapi_get_methods_methodDbId}()},
\code{\link{brapi_get_methods}()},
\code{\link{brapi_get_observationlevels}()},
\code{\link{brapi_get_observations_observationDbId}()},
\code{\link{brapi_get_observations}()},
\code{\link{brapi_get_observationunits_observationUnitDbId}()},
\code{\link{brapi_get_observationunits}()},
\code{\link{brapi_get_ontologies}()},
\code{\link{brapi_get_scales_scaleDbId}()},
\code{\link{brapi_get_scales}()},
\code{\link{brapi_get_search_observationunits_searchResultsDbId}()},
\code{\link{brapi_get_traits_traitDbId}()},
\code{\link{brapi_get_traits}()},
\code{\link{brapi_get_variables_observationVariableDbId}()},
\code{\link{brapi_get_variables}()},
\code{\link{brapi_post_methods}()},
\code{\link{brapi_post_observations}()},
\code{\link{brapi_post_observationunits}()},
\code{\link{brapi_post_scales}()},
\code{\link{brapi_post_search_observationunits}()},
\code{\link{brapi_post_traits}()},
\code{\link{brapi_post_variables}()},
\code{\link{brapi_put_methods_methodDbId}()},
\code{\link{brapi_put_observations_observationDbId}()},
\code{\link{brapi_put_scales_scaleDbId}()},
\code{\link{brapi_put_traits_traitDbId}()},
\code{\link{brapi_put_variables_observationVariableDbId}()}

Other Observation Units: 
\code{\link{brapi_get_observationlevels}()},
\code{\link{brapi_get_observationunits_observationUnitDbId}()},
\code{\link{brapi_get_observationunits}()},
\code{\link{brapi_get_search_observationunits_searchResultsDbId}()},
\code{\link{brapi_post_observationunits}()},
\code{\link{brapi_post_search_observationunits}()}
}
\author{
Maikel Verouden
}
\concept{Observation Units}
\concept{brapi-phenotyping}
