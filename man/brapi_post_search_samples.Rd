% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brapi_post_search_samples.R
\name{brapi_post_search_samples}
\alias{brapi_post_search_samples}
\title{post /search/samples}
\usage{
brapi_post_search_samples(
  con = NULL,
  externalReferenceIDs = "",
  externalReferenceSources = "",
  germplasmDbIds = "",
  germplasmNames = "",
  observationUnitDbIds = "",
  page = 0,
  pageSize = 1000,
  plateDbIds = "",
  sampleDbIds = "",
  studyDbIds = "",
  studyNames = ""
)
}
\arguments{
\item{con}{list; required: TRUE; BrAPI connection object}

\item{externalReferenceIDs}{vector of type character; required: FALSE;
External reference identifier(s) to search for. Could be a simple strings
or a URIs (use with \code{externalReferenceSources} parameter).; default:
"", when using multiple values supply as c("value1",
"value2").}

\item{externalReferenceSources}{vector of type character; required: FALSE;
Source system or database identifier(s) of an external reference(s) to
search for (use with \code{externalReferenceIDs} parameter); default:
"", when using multiple values supply as c("value1",
"value2").}

\item{germplasmDbIds}{vector of type character; required: FALSE; Vector of
database identifiers which uniquely identify germplasm to search for;
default: "", when using multiple values supply as
c("value1", "value2").}

\item{germplasmNames}{vector of type character; required: FALSE; Human
readable germplasm name(s) to search for; default: "", when
using multiple values supply as c("value1", "value2").}

\item{observationUnitDbIds}{vector of type character; required: FALSE; The
unique database identifier(s) of observation unit(s) to search samples for
; default: "", when using multiple values supply as c("
value1", "value2").}

\item{page}{integer; required: FALSE; Used to request a specific page of data
to be returned. The page indexing starts at 0 (the first page is
\code{page = 0}). Default is \code{0}.}

\item{pageSize}{integer; required: FALSE; The size of the pages to be
returned. Default is \code{1000}.}

\item{plateDbIds}{vector of type character; required: FALSE; The
identifier(s), which uniquely identifies a plate or plates of samples;
default: "", when using multiple values supply as c("value1
", "value2").}

\item{sampleDbIds}{vector of type character; required: FALSE; The
identifier(s), which uniquely identifies a sample or samples; default:
"", when using multiple values supply as c("value1",
"value2").}

\item{studyDbIds}{vector of type character; required: FALSE; List of unique
study database identifier(s) to search for; default: "", when
using multiple values supply as c("value1", "value2").}

\item{studyNames}{vector of type character; required: FALSE; List of study
names to filter search results; default: "", when using multiple
values supply as c("value1", "value2").}
}
\value{
data.frame
}
\description{
Submit a search request for \code{Samples}
}
\details{
Submit a search request for \code{Samples}. Function will return either
the search results (Status 200 for an immediate response) or a
\code{searchResultsDbId} (Status 202 for both a saved and an asynchronous
search).
}
\examples{
\dontrun{
con <- brapi_db()$testserver
con[["token"]] <- "YYYY"

# Immediate Response Example
brapi_post_search_samples(con = con,
                          page = 0,
                          pageSize = 1000)

# Saved or Asynchronous Search Response Example
brapi_post_search_samples(con = con,
                          germplasmDbIds = c("germplasm1",
                                             "germplasm3"),
                          page = 0,
                          pageSize = 1000,
                          plateDbIds = c("plate1",
                                         "vendor_plate1"),
                          studyDbIds = "study1")
}

}
\references{
\href{https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.0#/Samples/post_search_samples }{BrAPI SwaggerHub}
}
\seealso{
Other brapi-genotyping: 
\code{\link{brapi_get_callsets_callSetDbId_calls}()},
\code{\link{brapi_get_callsets_callSetDbId}()},
\code{\link{brapi_get_callsets}()},
\code{\link{brapi_get_calls}()},
\code{\link{brapi_get_references_referenceDbId}()},
\code{\link{brapi_get_references}()},
\code{\link{brapi_get_samples_sampleDbId}()},
\code{\link{brapi_get_samples}()},
\code{\link{brapi_get_search_calls_searchResultsDbId}()},
\code{\link{brapi_get_search_callsets_searchResultsDbId}()},
\code{\link{brapi_get_search_samples_searchResultsDbId}()},
\code{\link{brapi_get_search_variants_searchResultsDbId}()},
\code{\link{brapi_get_search_variantsets_searchResultsDbId}()},
\code{\link{brapi_get_variants_variantDbId_calls}()},
\code{\link{brapi_get_variants_variantDbId}()},
\code{\link{brapi_get_variantsets_variantSetDbId_callsets}()},
\code{\link{brapi_get_variantsets_variantSetDbId_calls}()},
\code{\link{brapi_get_variantsets_variantSetDbId_variants}()},
\code{\link{brapi_get_variantsets_variantSetDbId}()},
\code{\link{brapi_get_variantsets}()},
\code{\link{brapi_get_variants}()},
\code{\link{brapi_post_samples}()},
\code{\link{brapi_post_search_callsets}()},
\code{\link{brapi_post_search_calls}()},
\code{\link{brapi_post_search_variantsets}()},
\code{\link{brapi_post_search_variants}()},
\code{\link{brapi_post_variantsets_extract}()},
\code{\link{brapi_put_samples_sampleDbId}()}

Other Samples: 
\code{\link{brapi_get_samples_sampleDbId}()},
\code{\link{brapi_get_samples}()},
\code{\link{brapi_get_search_samples_searchResultsDbId}()},
\code{\link{brapi_post_samples}()},
\code{\link{brapi_put_samples_sampleDbId}()}
}
\author{
Maikel Verouden
}
\concept{Samples}
\concept{brapi-genotyping}
