% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brapi_post_search_observationunits.R
\name{brapi_post_search_observationunits}
\alias{brapi_post_search_observationunits}
\title{post /search/observationunits}
\usage{
brapi_post_search_observationunits(
  con = NULL,
  externalReferenceIDs = "",
  externalReferenceSources = "",
  germplasmDbIds = "",
  germplasmNames = "",
  includeObservations = NA,
  locationDbIds = "",
  locationNames = "",
  observationLevelRelationships = "",
  observationLevels = "",
  observationUnitDbIds = "",
  observationVariableDbIds = "",
  observationVariableNames = "",
  page = 0,
  pageSize = 1000,
  programDbIds = "",
  programNames = "",
  studyDbIds = "",
  studyNames = "",
  trialDbIds = "",
  trialNames = ""
)
}
\arguments{
\item{con}{list; required: TRUE; BrAPI connection object}

\item{externalReferenceIDs}{vector of type character; required: FALSE; List
of external reference IDs. Could be a simple strings or a URIs. (use with
\code{externalReferenceSources} parameter); default: "", when using
multiple values supply as c("value1", "value2").}

\item{externalReferenceSources}{vector of type character; required: FALSE;
List of identifiers for the source system or database of an external
reference (use with \code{externalReferenceIDs} parameter); default:
"", when using multiple values supply as c("value1",
"value2").}

\item{germplasmDbIds}{vector of type character; required: FALSE; List of
unique database identifiers, which uniquely identify germplasm to search
for; default: "", when using multiple values supply as c(
"value1", "value2").}

\item{germplasmNames}{vector of type character; required: FALSE; List of
human readable names to identify germplasm to search for; default:
"", when using multiple values supply as c("value1",
"value2").}

\item{includeObservations}{logical; required: FALSE; Use this parameter to
include a list of observations embedded in each ObservationUnit object.
CAUTION - Use this parameter at your own risk. It may return large,
unpaginated lists of observation data. Only set this value to \code{TRUE} if
you are sure you need to.}

\item{locationDbIds}{vector of type character; required: FALSE; The unique
location identifier(s) to search for; default: "", when using
multiple values supply as c("value1", "value2").}

\item{locationNames}{vector of type character; required: FALSE; A human
readable location name(s) to search for; default: "", when using
multiple values supply as c("value1", "value2").}

\item{observationLevelRelationships}{data.frame; required: FALSE; Data.frame
of observation levels to indicate the granularity level at which the
measurements are taken. Each row in the data.frame defines the level code,
level name (\code{levelName}), and the level order, as integer, where that
level exists in the hierarchy of levels. \code{levelOrders} lower numbers are
at the top of the hierarchy (i.e. field -> 0) and higher numbers are at
the bottom of the hierarchy (ie plant > 6). \code{levelCode} is an identifier
code for this level tag. Identify this observation unit by each level of
the hierarchy, where it exists.

The Examples section shows an example of how to construct the
\code{observationLevelRelationships} argument as a data.frame.}

\item{observationLevels}{data.frame; required: FALSE; A data.frame of
Observation levels, which indicate the granularity level at which the
measurements are taken. The \code{observationLevels} argument data.frame can
contain the following columns:
\itemize{
\item \code{levelName} character; required: FALSE; A name for this level.
\item \code{levelOrder} interger; required: FALSE; \code{levelOrder} defines, where that
level exists in the hierarchy of levels. \code{levelOrder}'s lower numbers
are at the top of the hierarchy (i.e. field -> 1) and higher numbers are
at the bottom of the hierarchy (i.e. plant -> 9).
}

The Examples section shows an example of how to construct the
\code{observationLevels} argument as a data.frame.}

\item{observationUnitDbIds}{vector of type character; required: FALSE; The
unique database identifier of an observation unit; default: "",
when using multiple values supply as c("value1",
"value2").}

\item{observationVariableDbIds}{vector of type character; required: FALSE;
The database identifiers of Variables to search for; default: ""
, when using multiple values supply as c("value1",
"value2").}

\item{observationVariableNames}{vector of type character; required: FALSE;
The names of Variables to search for; default: "", when using
multiple values supply as c("value1", "value2").}

\item{page}{integer; required: FALSE; Used to request a specific page of data
to be returned. The page indexing starts at 0 (the first page is
\code{page = 0}). Default is \code{0}.}

\item{pageSize}{integer; required: FALSE; The size of the pages to be
returned. Default is \code{1000}.}

\item{programDbIds}{vector of type character; required: FALSE; Unique program
database identifiers to search for; default: "", when using
multiple values supply as c("value1", "value2").}

\item{programNames}{vector of type character; required: FALSE; A program
names to search for; default: "", when using multiple values
supply as c("value1", "value2").}

\item{studyDbIds}{vector of type character; required: FALSE; List of unique
database study identifiers to search for; default: "", when
using multiple values supply as c("value1", "value2").}

\item{studyNames}{vector of type character; required: FALSE; List of study
names to filter search results; default: "", when using multiple
values supply as c("value1", "value2").}

\item{trialDbIds}{vector of type character; required: FALSE; The identifiers,
which uniquely identify trials to search for; default: "", when
using multiple values supply as c("value1", "value2").}

\item{trialNames}{vector of type character; required: FALSE; The human
readable names of trials to search for; default: "", when using
multiple values supply as c("value1", "value2").}
}
\value{
data.frame
}
\description{
Submit a search request for \code{ObservationUnits}
}
\details{
Submit a search request for \code{ObservationUnits}.  Function will return
either the search results (Status 200 for an immediate response) or a
\code{searchResultsDbId} (Status 202 for both a saved and an asynchronous
search).
}
\examples{
\dontrun{
con <- brapi_db()$testserver
con[["token"]] <- "YYYY"
observationLevelRelationships <- data.frame(
  levelCode  = c("fieldA", "rep1", "block1"),
  levelName  = c("field", "rep", "block"),
  levelOrder = c(1, 2, 3))
observationLevels <-
  data.frame(levelName = c("field", "block", "plot"),
             levelOrder = c(0, 1, 2))

# Immediate Response Example
brapi_post_search_observationunits(con = con,
                                   germplasmDbIds = "germplasm1")

# Saved or Asynchronous Search Response Example
brapi_post_search_observationunits(
  con = con,
  externalReferenceIDs = "https://brapi.org/specification",
  externalReferenceSources = "BrAPI Doc",
  germplasmDbIds = c("germplasm1", "germplasm2"),
  includeObservations = FALSE,
  programDbIds = "program1")
}

}
\references{
\href{https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.0#/Observation\%20Units/post_search_observationunits }{BrAPI SwaggerHub}
}
\seealso{
Other brapi-phenotyping: 
\code{\link{brapi_get_events}()},
\code{\link{brapi_get_images_imageDbId}()},
\code{\link{brapi_get_images}()},
\code{\link{brapi_get_methods_methodDbId}()},
\code{\link{brapi_get_methods}()},
\code{\link{brapi_get_observationlevels}()},
\code{\link{brapi_get_observations_observationDbId}()},
\code{\link{brapi_get_observations}()},
\code{\link{brapi_get_observationunits_observationUnitDbId}()},
\code{\link{brapi_get_observationunits}()},
\code{\link{brapi_get_ontologies}()},
\code{\link{brapi_get_scales_scaleDbId}()},
\code{\link{brapi_get_scales}()},
\code{\link{brapi_get_search_observationunits_searchResultsDbId}()},
\code{\link{brapi_get_traits_traitDbId}()},
\code{\link{brapi_get_traits}()},
\code{\link{brapi_get_variables_observationVariableDbId}()},
\code{\link{brapi_get_variables}()},
\code{\link{brapi_post_methods}()},
\code{\link{brapi_post_observations}()},
\code{\link{brapi_post_observationunits}()},
\code{\link{brapi_post_scales}()},
\code{\link{brapi_post_traits}()},
\code{\link{brapi_post_variables}()},
\code{\link{brapi_put_methods_methodDbId}()},
\code{\link{brapi_put_observations_observationDbId}()},
\code{\link{brapi_put_observationunits_observationUnitDbId}()},
\code{\link{brapi_put_scales_scaleDbId}()},
\code{\link{brapi_put_traits_traitDbId}()},
\code{\link{brapi_put_variables_observationVariableDbId}()}

Other Observation Units: 
\code{\link{brapi_get_observationlevels}()},
\code{\link{brapi_get_observationunits_observationUnitDbId}()},
\code{\link{brapi_get_observationunits}()},
\code{\link{brapi_get_search_observationunits_searchResultsDbId}()},
\code{\link{brapi_post_observationunits}()},
\code{\link{brapi_put_observationunits_observationUnitDbId}()}
}
\author{
Maikel Verouden
}
\concept{Observation Units}
\concept{brapi-phenotyping}
