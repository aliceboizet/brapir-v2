% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brapi_post_search_images.R
\name{brapi_post_search_images}
\alias{brapi_post_search_images}
\title{post /search/images}
\usage{
brapi_post_search_images(
  con = NULL,
  descriptiveOntologyTerms = "",
  externalReferenceIDs = "",
  externalReferenceSources = "",
  imageDbIds = "",
  imageFileNames = "",
  imageFileSizeMax = as.integer(NA),
  imageFileSizeMin = as.integer(NA),
  imageHeightMax = as.integer(NA),
  imageHeightMin = as.integer(NA),
  imageLocation = list(),
  imageNames = "",
  imageTimeStampRangeEnd = "",
  imageTimeStampRangeStart = "",
  imageWidthMax = as.integer(NA),
  imageWidthMin = as.integer(NA),
  mimeTypes = "",
  observationDbIds = "",
  observationUnitDbIds = "",
  page = 0,
  pageSize = 1000
)
}
\arguments{
\item{con}{list; required: TRUE; BrAPI connection object}

\item{descriptiveOntologyTerms}{vector of type character; required: FALSE; A
list of terms to formally describe the image to search for. Each item
could be a simple Tag, an Ontology reference identifier, or a full
ontology URL.; default: "", when using multiple values supply as
c("value1", "value2").}

\item{externalReferenceIDs}{vector of type character; required: FALSE;
External reference identifier(s) to search for. Could be a simple strings
or a URIs (use with \code{externalReferenceSources} parameter).; default:
"", when using multiple values supply as c("value1",
"value2").}

\item{externalReferenceSources}{vector of type character; required: FALSE;
Source system or database identifier(s) of an external reference(s) to
search for (use with \code{externalReferenceIDs} parameter); default:
"", when using multiple values supply as c("value1",
"value2").}

\item{imageDbIds}{vector of type character; required: FALSE; A list of unique
database identifiers of images to search for; default: "", when
using multiple values supply as c("value1", "value2").}

\item{imageFileNames}{vector of type character; required: FALSE; Image file
names to search for.; default: "", when using multiple values
supply as c("value1", "value2").}

\item{imageFileSizeMax}{integer; required: FALSE; A maximum image file size
to search for.}

\item{imageFileSizeMin}{integer; required: FALSE; A minimum image file size
to search for.}

\item{imageHeightMax}{integer; required: FALSE; A maximum image height to
search for.}

\item{imageHeightMin}{integer; required: FALSE; A minimum image height to
search for.}

\item{imageLocation}{list; required: FALSE; A GeoJSON Polygon geometry, as
defined by GeoJSON (RFC 7946), which describes an area to search for other
GeoJSON objects. All contained Points and intersecting Polygons are
returned as search results. The coordinates are decimal values on the
WGS84 geographic coordinate reference system. A coordinate position MUST
be two or more elements. The first two elements are longitude and
latitude, or easting and northing, precisely in that order and using
decimal numbers. Altitude or elevation MAY be included as an optional
third element and is  specified in meters.

The \code{coordinates} list MUST contain the following two elements:
\itemize{
\item \code{geometry} as a list; required: TRUE; A geometry as defined by GeoJSON
(RFC 7946). In this context, only Polygon geometry is allowed.

The Polygon geometry is described by exactly two elements:
\itemize{
\item \code{coordinates} as a list; required : TRUE; List of linear rings, where
each linear ring is a list of at least four positions with the first
equal to the last. The first linear ring specifies the exterior
ring, and each subsequent ring an interior ring.
\item \code{type} as a character; required: TRUE; Literally specified as "Polygon".
}
\item \code{type} as a character; required: TRUE; Literally specified as "Feature".
}

The easiest way in R to construct the \code{imageLocation} list is to use the
\strong{geojsonR} package. The Examples section shows how to create a
\code{imageLocation} list object for a polygon geometry.}

\item{imageNames}{vector of type character; required: FALSE; Human readable
image names to search for.; default: "", when using multiple
values supply as c("value1", "value2").}

\item{imageTimeStampRangeEnd}{character; required: FALSE; Time stamp to end
the range for images to filter on. Coded in the ISO 8601 standard extended
format, where date, time and time zone information needs to be provided
(check for example https://www.w3.org/TR/NOTE-datetime).}

\item{imageTimeStampRangeStart}{character; required: FALSE; Time stamp to
start the range for images to filter on. Coded in the ISO 8601 standard
extended format, where date, time and time zone information needs to be
provided (check for example https://www.w3.org/TR/NOTE-datetime).}

\item{imageWidthMax}{integer; required: FALSE; A maximum image width to
search for.}

\item{imageWidthMin}{integer; required: FALSE; A minimum image width to
search for.}

\item{mimeTypes}{vector of type character; required: FALSE; A set of image
file types to search for, pattern to use "image/*" e.g. "image/jpg",
"image/jpeg", "image/gif"; default: "", when using multiple
values supply as c("value1", "value2").}

\item{observationDbIds}{vector of type character; required: FALSE; A list of
unique observation database identifiers this image is associated with to
search for; default: "", when using multiple values supply as
c("value1", "value2").}

\item{observationUnitDbIds}{vector of type character; required: FALSE; A set
of unique observation unit database identifiers to search for.; default:
"", when using multiple values supply as
c("value1", "value2").}

\item{page}{integer; required: FALSE; Used to request a specific page of data
to be returned. The page indexing starts at 0 (the first page is
\code{page = 0}). Default is \code{0}.}

\item{pageSize}{integer; required: FALSE; The size of the pages to be
returned. Default is \code{1000}.}
}
\value{
data.frame
}
\description{
Submit a search request for \code{images}
}
\details{
Submit a search request for \code{Images}. Function will return
either the search results (Status 200 for an immediate response) or a
\code{searchResultsDbId} (Status 202 for both a saved and an asynchronous
search).
}
\examples{
\dontrun{
con <- brapi_db()$testserver
con[["token"]] <- "YYYY"

## Create a imageLocation list object
library(geojsonR)
## Polygon geometry with an exterior ring only
init <- TO_GeoJson$new()
## Individual polygon points are provided as c(longitude, latitude, altitude)
polygonData <- list(list(c(-76.476949, 42.447274, 123), # exterior ring (rectangle)
                         c(-76.474429, 42.447258, 123),
                         c(-76.474428, 42.446193, 123),
                         c(-76.476961, 42.446211, 123),
                         c(-76.476949, 42.447274, 123)))
imageLocation <- list()
imageLocation[["geometry"]] <- init$Polygon(data = polygonData,
                                            stringify = FALSE)
imageLocation[["type"]] <- "Feature"

# Immediate Response Example
brapi_post_search_images(con = con,
                         page = 0,
                         pageSize = 1000)

# Saved or Asynchronous Search Response Example
brapi_post_search_images(con = con,
                         imageDbIds = c("image1",
                                        "image2"),
                         imageWidthMax = 1920,
                         imageWidthMin = 100,
                         mimeTypes = c("image/jpg",
                                       "image/jpeg",
                                       "image/gif"))
}

}
\references{
\href{https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.0#/Images/post_search_images }{BrAPI SwaggerHub}
}
\seealso{
Other brapi-phenotyping: 
\code{\link{brapi_get_events}()},
\code{\link{brapi_get_images_imageDbId}()},
\code{\link{brapi_get_images}()},
\code{\link{brapi_get_methods_methodDbId}()},
\code{\link{brapi_get_methods}()},
\code{\link{brapi_get_observationlevels}()},
\code{\link{brapi_get_observations_observationDbId}()},
\code{\link{brapi_get_observations}()},
\code{\link{brapi_get_observationunits_observationUnitDbId}()},
\code{\link{brapi_get_observationunits}()},
\code{\link{brapi_get_ontologies}()},
\code{\link{brapi_get_scales_scaleDbId}()},
\code{\link{brapi_get_scales}()},
\code{\link{brapi_get_search_images_searchResultsDbId}()},
\code{\link{brapi_get_search_observations_searchResultsDbId}()},
\code{\link{brapi_get_search_observationunits_searchResultsDbId}()},
\code{\link{brapi_get_search_variables_searchResultsDbId}()},
\code{\link{brapi_get_traits_traitDbId}()},
\code{\link{brapi_get_traits}()},
\code{\link{brapi_get_variables_observationVariableDbId}()},
\code{\link{brapi_get_variables}()},
\code{\link{brapi_post_images}()},
\code{\link{brapi_post_methods}()},
\code{\link{brapi_post_observations}()},
\code{\link{brapi_post_observationunits}()},
\code{\link{brapi_post_scales}()},
\code{\link{brapi_post_search_observations}()},
\code{\link{brapi_post_search_observationunits}()},
\code{\link{brapi_post_search_variables}()},
\code{\link{brapi_post_traits}()},
\code{\link{brapi_post_variables}()},
\code{\link{brapi_put_images_imageDbId_imagecontent}()},
\code{\link{brapi_put_images_imageDbId}()},
\code{\link{brapi_put_methods_methodDbId}()},
\code{\link{brapi_put_observations_observationDbId}()},
\code{\link{brapi_put_observationunits_observationUnitDbId}()},
\code{\link{brapi_put_scales_scaleDbId}()},
\code{\link{brapi_put_traits_traitDbId}()},
\code{\link{brapi_put_variables_observationVariableDbId}()}

Other Images: 
\code{\link{brapi_get_images_imageDbId}()},
\code{\link{brapi_get_images}()},
\code{\link{brapi_get_search_images_searchResultsDbId}()},
\code{\link{brapi_post_images}()},
\code{\link{brapi_put_images_imageDbId_imagecontent}()},
\code{\link{brapi_put_images_imageDbId}()}
}
\author{
Maikel Verouden
}
\concept{Images}
\concept{brapi-phenotyping}
