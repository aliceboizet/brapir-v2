% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brapi_put_traits_traitDbId.R
\name{brapi_put_traits_traitDbId}
\alias{brapi_put_traits_traitDbId}
\title{put /traits/\{traitDbId\}}
\usage{
brapi_put_traits_traitDbId(
  con = NULL,
  traitDbId = "",
  additionalInfo = list(),
  alternativeAbbreviations = "",
  attribute = "",
  entity = "",
  externalReferences = "",
  mainAbbreviation = "",
  ontologyReference = list(),
  status = "",
  synonyms = "",
  traitClass = "",
  traitDescription = "",
  traitName = ""
)
}
\arguments{
\item{con}{list; required: TRUE; BrAPI connection object}

\item{traitDbId}{character; required: TRUE; Identifier for the trait to
update details of.}

\item{additionalInfo}{list; required: FALSE; Additional arbitrary information.
If provided use the following construct list(additionalProp1 = "string",
additionalProp2 =  "string", additionalProp3 = "string").

The Examples section shows an example on how to construct the
\code{additionalInfo} argument as a list.}

\item{alternativeAbbreviations}{vector of type character; required: FALSE;
Other frequent abbreviations of the trait, if any. These abbreviations do
not have to follow a convention; default: "", when using
multiple values supply as c("value1", "value2").}

\item{attribute}{character; required: FALSE; A trait can be decomposed as
"Trait" = "Entity" + "Attribute", the
attribute is the observed feature (or characteristic) of the entity, e.g.
for "grain colour", attribute = "colour".}

\item{entity}{character; required: FALSE; A trait can be decomposed as
"Trait" = "Entity" + "Attribute", the entity
is the part of the plant that the trait refers to, e.g. for
"grain colour", entity = "grain".}

\item{externalReferences}{data.frame; required: FALSE; A data.frame of
external reference ids. These are references to this piece of data in an
external system. Could be a simple string or a URI. The \code{externalReferences}
argument data.frame should contain the following columns:
\itemize{
\item \code{referenceID} character; required: TRUE; The external reference ID. Could
be a simple string or a URI.
\item \code{referenceSource} character; required: TRUE; An identifier for the source
system or database of this reference.
}

The Examples section shows an example of how to construct the
\code{externalReferences} argument as a data.frame.}

\item{mainAbbreviation}{character; required: FALSE; Main abbreviation for
trait name, examples: "Carotenoid content" => "CC").}

\item{ontologyReference}{list; required: FALSE; MIAPPE V1.1 (DM-85) Variable
accession number - Accession number of the variable in the Crop Ontology.
(DM-87) Trait accession number - Accession number of the trait in a
suitable controlled vocabulary (Crop Ontology, Trait Ontology). (DM-89)
Method accession number - Accession number of the method in a suitable
controlled vocabulary (Crop Ontology, Trait Ontology). (DM-93) Scale
accession number - Accession number of the scale in a suitable controlled
vocabulary (Crop Ontology).

The \code{ontolgyReference} list should/can contain the following elements:
\itemize{
\item \code{documentationLinks} data.frame; required: FALSE; Links to various
ontology documentation. Each row in the \code{documentationLinks} data.frame
should contain the following columns:
\itemize{
\item \code{URL} character; required: FALSE; A uniform resource locator
specified as a valid uniform resource identifier (URI), e.g.
http://purl.obolibrary.org/obo/ro.owl
\item \code{type} character; required: FALSE; one of "OBO"|
"RDF"|"WEBPAGE".
}
\item \code{ontologyDbId} character; required: TRUE; Ontology database unique
identifier.
\item \code{ontologyName} character; required: TRUE; Ontology name, e.g. the Crop
Ontology.
\item \code{version} character; required: FALSE; Ontology version (no specific
format).
}

The Examples section shows an example of how to construct the
\code{ontologyReference} argument as a list.}

\item{status}{character; required: FALSE; Trait status (examples:
"recommended", "obsolete", "legacy", \emph{etc.}).}

\item{synonyms}{vector of type character; required: FALSE; Other trait names;
default: "", when using multiple values supply as c(
"value1", "value2").}

\item{traitClass}{character; required: FALSE; Trait class, examples:
"morphological", "phenological",
"agronomical", "physiological",
"abiotic stress", "biotic stress",
"biochemical", "quality traits",
"fertility", \emph{etc.}).}

\item{traitDescription}{character; required: FALSE; The description of a
trait.}

\item{traitName}{character; required: FALSE; The human readable name of a
trait. MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental)
trait under observation.}
}
\value{
data.frame
}
\description{
Update an existing Trait
}
\details{
Update an existing trait
}
\examples{
\dontrun{
con <- brapi_db()$testserver
con[["token"]] <- "YYYY"
additionalInfo <- list(dummyData = "TRUE",
                       example = "post_traits")
alternativeAbbreviations <- c("PHght", "Hght")
attribute <- "heigth"
entity <- "plant"
externalReferences <-
  data.frame(referenceID = c("doi:10.155454/12341234",
                             "http://purl.obolibrary.org/obo/ro.owl",
                             "75a50e76"),
             referenceSource = c("DOI",
                                 "OBO Library",
                                 "Remote Data Collection Upload Tool"))
mainAbbreviation <- "PH"
ontologyReference <- list(
  documentationLinks = data.frame(
    URL = c("http://purl.obolibrary.org/obo/ro.owl",
            "https://www.cropontology.org/terms/CO_323:0000024/"),
    type = c("OBO",
             "WEBPAGE")),
  ontologyDbId = "ontology_variable1",
  ontologyName = "Ontology.org",
  version = "17")
status <- "recommended"
synonyms <- c("Height",
              "Plant Height")
traitClass <- "agrinomically"
traitDescription <- "The height of plant from ground."
traitName <- "Plant heigth"
## Add the new trait
out <- brapi_post_traits(
  con = con,
  additionalInfo = additionalInfo,
  alternativeAbbreviations = alternativeAbbreviations,
  attribute = attribute,
  entity = entity,
  externalReferences = externalReferences,
  mainAbbreviation = mainAbbreviation,
  ontologyReference = ontologyReference,
  status = status,
  synonyms = synonyms,
  traitClass = traitClass,
  traitDescription = traitDescription,
  traitName = traitName)
## Obtain the identifier for the new trait
traitDbId <- unique(out$traitDbId)
## Retrieve the info of the new trait
brapi_get_traits_traitDbId(con = con, traitDbId)
## Update the info of the new trait
brapi_put_traits_traitDbId(
  con = con,
  traitDbId = traitDbId,
  attribute = "Height",
  synonyms = c("Height",
                "Plant Height",
                "Stalk Height",
                "Canopy Height"),
  traitClass = "agronomical",
  traitDescription = "The height of plant from ground to the top part.",
  traitName = "Plant height")
}

}
\references{
\href{https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.0#/Traits/put_traits__traitDbId_ }{BrAPI SwaggerHub}
}
\seealso{
Other brapi-phenotyping: 
\code{\link{brapi_get_events}()},
\code{\link{brapi_get_images_imageDbId}()},
\code{\link{brapi_get_images}()},
\code{\link{brapi_get_methods_methodDbId}()},
\code{\link{brapi_get_methods}()},
\code{\link{brapi_get_observationlevels}()},
\code{\link{brapi_get_observations_observationDbId}()},
\code{\link{brapi_get_observations}()},
\code{\link{brapi_get_observationunits_observationUnitDbId}()},
\code{\link{brapi_get_observationunits}()},
\code{\link{brapi_get_ontologies}()},
\code{\link{brapi_get_scales_scaleDbId}()},
\code{\link{brapi_get_scales}()},
\code{\link{brapi_get_search_images_searchResultsDbId}()},
\code{\link{brapi_get_search_observations_searchResultsDbId}()},
\code{\link{brapi_get_search_observationunits_searchResultsDbId}()},
\code{\link{brapi_get_search_variables_searchResultsDbId}()},
\code{\link{brapi_get_traits_traitDbId}()},
\code{\link{brapi_get_traits}()},
\code{\link{brapi_get_variables_observationVariableDbId}()},
\code{\link{brapi_get_variables}()},
\code{\link{brapi_post_images}()},
\code{\link{brapi_post_methods}()},
\code{\link{brapi_post_observations}()},
\code{\link{brapi_post_observationunits}()},
\code{\link{brapi_post_scales}()},
\code{\link{brapi_post_search_images}()},
\code{\link{brapi_post_search_observations}()},
\code{\link{brapi_post_search_observationunits}()},
\code{\link{brapi_post_search_variables}()},
\code{\link{brapi_post_traits}()},
\code{\link{brapi_post_variables}()},
\code{\link{brapi_put_images_imageDbId}()},
\code{\link{brapi_put_methods_methodDbId}()},
\code{\link{brapi_put_observations_observationDbId}()},
\code{\link{brapi_put_observationunits_observationUnitDbId}()},
\code{\link{brapi_put_scales_scaleDbId}()},
\code{\link{brapi_put_variables_observationVariableDbId}()}

Other Traits: 
\code{\link{brapi_get_traits_traitDbId}()},
\code{\link{brapi_get_traits}()},
\code{\link{brapi_post_traits}()}
}
\author{
Maikel Verouden
}
\concept{Traits}
\concept{brapi-phenotyping}
